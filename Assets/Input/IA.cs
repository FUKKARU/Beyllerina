//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/IA.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace IA
{
    public partial class @IA: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @IA()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""IA"",
    ""maps"": [
        {
            ""name"": ""MainGame"",
            ""id"": ""7ceff4ab-1abe-4191-af9a-db96e0158161"",
            ""actions"": [
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""3d878511-380e-4782-b740-d6a91051c5cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Counter"",
                    ""type"": ""Button"",
                    ""id"": ""41ea0204-58d3-45c8-bd3f-ced5bd7fe82e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skill"",
                    ""type"": ""Button"",
                    ""id"": ""1359ef5a-5d73-45d2-aa7b-61879fbebda4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special"",
                    ""type"": ""Button"",
                    ""id"": ""da655ae7-c7ca-4fd7-9685-e3ffda141a07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e78baea8-bc67-4a95-bac3-8a1e61091c77"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""476f3ec2-1a9c-4d8f-ba9b-9763838ee25d"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a568bad-2338-4a30-beaf-b485b8fd145e"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Counter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8410c62-e6ba-4464-846e-1d9d1ab77950"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Counter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e5edf73f-cd31-43bd-8344-8387f64aca9f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18427869-8888-42c3-b42b-63bbe0ddf5bd"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e32e49e2-38bc-499a-bb8e-3f4b0f796f1b"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""51207e18-25c4-4a5e-abb5-b7f108b3c49b"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Special"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SubGame"",
            ""id"": ""362ce215-4edd-4cc7-9fe5-4d3a4e6f7f15"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""3c8d1f48-50fb-41b5-b654-614f89cb8260"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""34771d85-1bac-42a2-88a6-a01f7b14704b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""16fb9169-1b16-45ff-8bb7-a26ad00b17c8"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""dd1c44d4-3dbd-464f-936d-d1a1f3e2260d"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dff07531-10c0-4f8b-a585-921d32413c14"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""70a0445d-ee98-48f0-b44a-f3371203e4b5"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5880d1e6-ef47-4683-9e95-316057700f25"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dcc4681d-7bb1-490a-b664-aaedc0ea2b0e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""a2bf1b90-6392-4f54-9f1e-b5fa6f3742e7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4565b7da-7d68-4b34-b9ab-153175925582"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1c0703a1-6186-4e42-9b5d-229e3eb70514"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""System"",
            ""id"": ""4ac8394e-e196-48ca-9c9d-48cafd576e62"",
            ""actions"": [
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""1469d5bd-48de-45b2-8ed1-b84cf6590c90"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""9a794d85-366e-4316-9453-e286d0029dcc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""0d29f70f-1033-4708-a68e-f6105db9efb9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=3)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""62f6c11b-b6b2-4adf-850b-e02c0851ff1b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99a106ab-61f1-4990-8204-7d96374cb009"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6a9a088-2478-4663-983b-8ea73b982660"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ffb03fd2-323e-4293-9666-98862b7aae5a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f9fd375-9cc7-45cf-abaf-3991905c5f38"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""589ed798-e459-471c-8b69-7cf05ed8cabd"",
                    ""path"": ""<Keyboard>/delete"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // MainGame
            m_MainGame = asset.FindActionMap("MainGame", throwIfNotFound: true);
            m_MainGame_Push = m_MainGame.FindAction("Push", throwIfNotFound: true);
            m_MainGame_Counter = m_MainGame.FindAction("Counter", throwIfNotFound: true);
            m_MainGame_Skill = m_MainGame.FindAction("Skill", throwIfNotFound: true);
            m_MainGame_Special = m_MainGame.FindAction("Special", throwIfNotFound: true);
            // SubGame
            m_SubGame = asset.FindActionMap("SubGame", throwIfNotFound: true);
            m_SubGame_Rotate = m_SubGame.FindAction("Rotate", throwIfNotFound: true);
            // System
            m_System = asset.FindActionMap("System", throwIfNotFound: true);
            m_System_Select = m_System.FindAction("Select", throwIfNotFound: true);
            m_System_Cancel = m_System.FindAction("Cancel", throwIfNotFound: true);
            m_System_Quit = m_System.FindAction("Quit", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MainGame
        private readonly InputActionMap m_MainGame;
        private List<IMainGameActions> m_MainGameActionsCallbackInterfaces = new List<IMainGameActions>();
        private readonly InputAction m_MainGame_Push;
        private readonly InputAction m_MainGame_Counter;
        private readonly InputAction m_MainGame_Skill;
        private readonly InputAction m_MainGame_Special;
        public struct MainGameActions
        {
            private @IA m_Wrapper;
            public MainGameActions(@IA wrapper) { m_Wrapper = wrapper; }
            public InputAction @Push => m_Wrapper.m_MainGame_Push;
            public InputAction @Counter => m_Wrapper.m_MainGame_Counter;
            public InputAction @Skill => m_Wrapper.m_MainGame_Skill;
            public InputAction @Special => m_Wrapper.m_MainGame_Special;
            public InputActionMap Get() { return m_Wrapper.m_MainGame; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainGameActions set) { return set.Get(); }
            public void AddCallbacks(IMainGameActions instance)
            {
                if (instance == null || m_Wrapper.m_MainGameActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MainGameActionsCallbackInterfaces.Add(instance);
                @Push.started += instance.OnPush;
                @Push.performed += instance.OnPush;
                @Push.canceled += instance.OnPush;
                @Counter.started += instance.OnCounter;
                @Counter.performed += instance.OnCounter;
                @Counter.canceled += instance.OnCounter;
                @Skill.started += instance.OnSkill;
                @Skill.performed += instance.OnSkill;
                @Skill.canceled += instance.OnSkill;
                @Special.started += instance.OnSpecial;
                @Special.performed += instance.OnSpecial;
                @Special.canceled += instance.OnSpecial;
            }

            private void UnregisterCallbacks(IMainGameActions instance)
            {
                @Push.started -= instance.OnPush;
                @Push.performed -= instance.OnPush;
                @Push.canceled -= instance.OnPush;
                @Counter.started -= instance.OnCounter;
                @Counter.performed -= instance.OnCounter;
                @Counter.canceled -= instance.OnCounter;
                @Skill.started -= instance.OnSkill;
                @Skill.performed -= instance.OnSkill;
                @Skill.canceled -= instance.OnSkill;
                @Special.started -= instance.OnSpecial;
                @Special.performed -= instance.OnSpecial;
                @Special.canceled -= instance.OnSpecial;
            }

            public void RemoveCallbacks(IMainGameActions instance)
            {
                if (m_Wrapper.m_MainGameActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMainGameActions instance)
            {
                foreach (var item in m_Wrapper.m_MainGameActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MainGameActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MainGameActions @MainGame => new MainGameActions(this);

        // SubGame
        private readonly InputActionMap m_SubGame;
        private List<ISubGameActions> m_SubGameActionsCallbackInterfaces = new List<ISubGameActions>();
        private readonly InputAction m_SubGame_Rotate;
        public struct SubGameActions
        {
            private @IA m_Wrapper;
            public SubGameActions(@IA wrapper) { m_Wrapper = wrapper; }
            public InputAction @Rotate => m_Wrapper.m_SubGame_Rotate;
            public InputActionMap Get() { return m_Wrapper.m_SubGame; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SubGameActions set) { return set.Get(); }
            public void AddCallbacks(ISubGameActions instance)
            {
                if (instance == null || m_Wrapper.m_SubGameActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SubGameActionsCallbackInterfaces.Add(instance);
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }

            private void UnregisterCallbacks(ISubGameActions instance)
            {
                @Rotate.started -= instance.OnRotate;
                @Rotate.performed -= instance.OnRotate;
                @Rotate.canceled -= instance.OnRotate;
            }

            public void RemoveCallbacks(ISubGameActions instance)
            {
                if (m_Wrapper.m_SubGameActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISubGameActions instance)
            {
                foreach (var item in m_Wrapper.m_SubGameActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SubGameActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SubGameActions @SubGame => new SubGameActions(this);

        // System
        private readonly InputActionMap m_System;
        private List<ISystemActions> m_SystemActionsCallbackInterfaces = new List<ISystemActions>();
        private readonly InputAction m_System_Select;
        private readonly InputAction m_System_Cancel;
        private readonly InputAction m_System_Quit;
        public struct SystemActions
        {
            private @IA m_Wrapper;
            public SystemActions(@IA wrapper) { m_Wrapper = wrapper; }
            public InputAction @Select => m_Wrapper.m_System_Select;
            public InputAction @Cancel => m_Wrapper.m_System_Cancel;
            public InputAction @Quit => m_Wrapper.m_System_Quit;
            public InputActionMap Get() { return m_Wrapper.m_System; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SystemActions set) { return set.Get(); }
            public void AddCallbacks(ISystemActions instance)
            {
                if (instance == null || m_Wrapper.m_SystemActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SystemActionsCallbackInterfaces.Add(instance);
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Cancel.started += instance.OnCancel;
                @Cancel.performed += instance.OnCancel;
                @Cancel.canceled += instance.OnCancel;
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
            }

            private void UnregisterCallbacks(ISystemActions instance)
            {
                @Select.started -= instance.OnSelect;
                @Select.performed -= instance.OnSelect;
                @Select.canceled -= instance.OnSelect;
                @Cancel.started -= instance.OnCancel;
                @Cancel.performed -= instance.OnCancel;
                @Cancel.canceled -= instance.OnCancel;
                @Quit.started -= instance.OnQuit;
                @Quit.performed -= instance.OnQuit;
                @Quit.canceled -= instance.OnQuit;
            }

            public void RemoveCallbacks(ISystemActions instance)
            {
                if (m_Wrapper.m_SystemActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISystemActions instance)
            {
                foreach (var item in m_Wrapper.m_SystemActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SystemActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SystemActions @System => new SystemActions(this);
        public interface IMainGameActions
        {
            void OnPush(InputAction.CallbackContext context);
            void OnCounter(InputAction.CallbackContext context);
            void OnSkill(InputAction.CallbackContext context);
            void OnSpecial(InputAction.CallbackContext context);
        }
        public interface ISubGameActions
        {
            void OnRotate(InputAction.CallbackContext context);
        }
        public interface ISystemActions
        {
            void OnSelect(InputAction.CallbackContext context);
            void OnCancel(InputAction.CallbackContext context);
            void OnQuit(InputAction.CallbackContext context);
        }
    }
}
